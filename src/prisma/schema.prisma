// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

enum Cycle {
  Physics
  Chemistry
}

enum Role {
  Normal
  Admin
}

model Student {
  fullName String   @map("full_name")
  usn      String   @id
  cgpa     Float?
  cycle    Cycle?   @map("cycle")
  marks    Marks[]
  result   Result[]

  @@map("STUDENT")
}

model Semester {
  semesterNumber  String    @id @map("semester_number")
  semesterCredits Int       @map("semester_credits")
  subjects        Subject[]
  result          Result[]

  @@map("SEMESTER")
}

model Subject {
  subjectName    String     @map("subject_name")
  subjectCode    String     @id @map("subject_code")
  subjectCredits Int        @map("subject_credits")
  semester       Semester[]
  marks          Marks[]

  @@map("SUBJECT")
}

model Marks {
  id               String  @id @default(uuid())
  internalMarks    Float   @map("internal_marks")
  externalMarks    Float   @map("external_marks")
  revaluationMarks Float?  @map("revaluation_marks")
  totalMarks       Float   @map("total_marks")
  subject          Subject @relation(fields: [subjectCode], references: [subjectCode])
  student          Student @relation(fields: [studentUsn], references: [usn])
  subjectCode      String  @map("subject_code")
  studentUsn       String  @map("student_usn")

  @@map("MARKS")
}

model Result {
  id             String   @id @default(uuid())
  sgpa           Float
  totalMarks     Int
  student        Student  @relation(fields: [studentUsn], references: [usn])
  semester       Semester @relation(fields: [semesterNumber], references: [semesterNumber])
  studentUsn     String   @map("student_usn")
  semesterNumber String   @map("semester_number")

  @@map("RESULT")
}

// Next Auth Schema

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  role          Role?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("USER")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("ACCOUNT")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("SESSION")
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("AUTHENTICATOR")
}
